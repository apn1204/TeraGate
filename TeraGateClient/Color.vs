/*****************************************************************************************************
셰이더란 실제 모델의 렌더링을 수행하는 작은 프로그램이다.

셰이더 프로그램은 우선 전역 변수로부터 시작한다.
이 전역 변수들은 C++코드에서 접근하여 수정할 수 있다.
여기서 int, float같은 타입의 변수들을 사용할 수 있고 셰이더 프로그램을 사용하기 전에 외부적으로 설정할 수 있다.

보통 전역 변수들은 cbuffer라고 불리는 버퍼 객체 타입에 넣는다.
논리적으로 이 버퍼들을 조직하는 일은 셰이더의 효율적인 실행뿐만 아니라 그래픽카드가 어떻게 이 버퍼들을 저장하는 지와도 관련되기 때문에 중요하다.
*****************************************************************************************************/
// 전역 선언
cbuffer MatrixBuffer
{
	matrix worldMatrix;
	matrix viewMatrix;
	matrix projectionMatrix;
};

/*****************************************************************************************************
사용자 정의 타입 역시 C와 비슷하게 사용할 수 있다.
HLSL에서만 지원하는 float4같은 타입을 사용하자.
xyzw위치를 가지는 벡터와 rgba색상을 모두 가지는 타입을 만들자.

GPU에 POSIION, COLOR, SV_POSITION은 GPU에 이 변수들을 사용할 것이라고 전달한다.
비록 구조는 같지만 정점 및 픽셀 셰이더의 의미가 다르기 때문에 이에 해당하는 두 개의 다른 구조체를 정의.

만약 같은 타입의 변수를 더 사용하고 싶다면 COLOR0, COLOR1 처럼 이름 끝에 숫자를 붙여주면 된다.
*****************************************************************************************************/
// 타입 정의
struct VertexInputType
{
	float4 position : POSITION;
	float4 color    : COLOR;
};
struct PixelInputType
{
	float4 position : SV_POSITION;
	float4 color    : COLOR;
};

/*****************************************************************************************************
# 정점 셰이더 Vertext Shader
정점 셰이더는 정점 버퍼의 데이터를 처리하기 위해 GPU에 의해 호출된다.
ColorVertexShader라고 이름지은 정점 셰이더는 정점 버퍼의 모든 각 정점에 대해 호출된다.
정점 셰이더의 입력으로 들어오는 것은 VertextInputType과 같이 셰이더의 소스에서 정의한 자료구조와 그 구조가 일치해야 한다.
정점 셰이더의 처리 결과는 PixelInputType 형태로 픽셀 셰이더로 보내진다.

입력된 정점들은 월드, 뷰, 사영 행렬과 곱셈연산을 하게 된다.
이렇게 하여 3D세계에서의 정점을 플레이어의 시야에 맞는 2D화면의 위치로 지정해준다.
입력변수 값으로 위치 지정을 위해 XYZ좌표만을 사용하기 때문에 W값은 1.0으로 설정했다는 것을 주의.
*****************************************************************************************************/
// 정점 셰이더
PixelInputType ColorVertexShader(VertexInputType input)
{
	PixelInputType output;

	// 올바른 행렬 연산을 위해 position 벡터를 w까지 있는 4성분이 있는 것으로 사용.
	input.position.w = 1.0f;

	// 정점의 위치를 월드, 뷰, 사영의 순으로 계산한다.
	output.position = mul(input.position,  worldMatrix);
	output.position = mul(output.position, viewMatrix);
	output.position = mul(output.position, projectionMatrix);

	// 픽셀 셰이더에서 사용하기 위해 입력 색상을 저장
	output.color = input.color;

	return output;
}